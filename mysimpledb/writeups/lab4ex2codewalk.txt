Lab 4 Code Walk
---------------

Walk thru 1: simpledb.Parser.main() and simpledb.Parser.start()

	simpledb.Parser.main() is the entry point for the SimpleDB system. It calls simpledb.Parser.start(). The latter performs three main actions:
		1) It populates the SimpleDB catalog from the catalog text file provided by the user as argument (Database.getCatalog().loadSchema(argv[0]);).
		2) For each table defined in the system catalog, it computes statistics over the data in the table by calling: TableStats.computeStatistics(), which then does: TableStats s = new TableStats(tableid, IOCOSTPERPAGE);
		3) It processes the statements submitted by the user (processNextStatement(new ByteArrayInputStream(statementBytes));)

Walk thru 2: simpledb.Parser.processNextStatement()

	This method takes in the user input and attempts to parse it as SQL, using
	the Zql parsing library.  This method handles bad user input, as well as valid SQL statements include INSERT, DELETE, and SELECT statements.  

	We focus on the SELECT statement which is handled by 
		handleQueryStatement((ZQuery)s)
	This returns a Query object, which is then executed by calling
		query.execute();

Walk thru 3: simpledb.Parser.handleQueryStatement()

	This method creates a new Query object and gets its logical plan by calling
		parseQueryLogicalPlan()
	and its physical plan by calling
		LogicalPlan.physicalPlan()
	QueryPlanVisualizer is invoked if available.
	
	This returns a Query object. 	

Walk thru 4: simpledb.Parser.parseQueryLogicalPlan()

	This method takes a ZQuery object, parses the query, and builds the logical plan based on the query.
	This includes parsing clauses including FROM, WHERE, GROUP BY, and SELECT.
	
	This returns a LogicalPlan object with all the necessary fields and variables specified in the query.

	Note: this method is rather long and complex.  Your walk thru should focus
	on the high-level ideas.  Specifically, explain how SQL query is processed to construct the LogicalPlan.  
 
Walk thru 5: simpledb.LogicalPlan.physicalPlan()

	Your walk thru should explain how these data structures are used:
		- equivMap
		- filterSelectivities
		- statsMap
		- subplanMap

	equivMap keeps track of table aliases of all the LogicalJoinNodes.
	filterSelectivities keeps track of selectivities of all the LogicalJoinNodes.
	statsMap keeps track of statistics (histogram) of the base tables of all queries.
	subplanMap keeps track of iterators of all queries.
	
	This returns a DbIterator object that represents the physical plan built using the data structures above.

Walk thru 6: simpledb.JoinOptimizer.orderJoins()

	This method orders given join operations by evaluating possible join orders and picking the best order through dynamic programming.
	We start with looking for the best plan for one join, and increase the number of joins.
		
	This returns a Vector<LogicalJoinNode> object with the optimized order of join operations. 

Walk thru 7: JoinOptimizer.computeCostAndCardOfSubplan()

	This method provides he best join ordering for joining 'joinToRemove' with 'joinSet'-'joinToRemove.'
	This serves as a helper method for the method JoinOptimizer.orderJoins().
	
	This returns a CostCard object that contains the best join ordering and its cost and cardinality.

Walk thru 8: JoinOptimizer.estimateJoinCost()

	This method gives the estimated cost of a given join based on the costs and cardinalities of the left and right queries.
	This returns the estimated cost as a double. 

Walk thru 9: JoinOptimizer.estimateJoinCardinality()

	This method gives the estimated cardinality of a given join based on the costs and table statistics of the left and right queries.
	This returns the estimated cardinality as an integer.

Walk thru 10 query.execute()
	
	Note: This is called inside simpledb.Parser.processNextStatement().  Refer back to Walk thru 2.

	This method prints out the field names, starts(opens) the query iterator, and prints out the resulting tuples.
	This returns nothing.

